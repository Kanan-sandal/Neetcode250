class MyHashSet {
private:
    static const int DEFAULT_BUCKETS = 769; 
    vector<list<int>> buckets;
    int bucketCount;

    int hash(int key) const {
        return (key % bucketCount + bucketCount) % bucketCount;
    }

public:
    MyHashSet(int buckets = DEFAULT_BUCKETS):bucketCount(buckets), buckets(buckets) {
        
    }
    
    void add(int key) {
        int idx = hash(key);
        for (int v : buckets[idx]) {
            if (v == key) return; 
        }
        buckets[idx].push_back(key);
    }
    
    void remove(int key) {
        int idx = hash(key);
        auto &lst = buckets[idx];
        for (auto it = lst.begin(); it != lst.end(); ++it) {
            if (*it == key) {
                lst.erase(it);
                return;
            }
        }
    }
    
    bool contains(int key) {
        int idx = hash(key);
        for (int v : buckets[idx]) {
            if (v == key) return true;
        }
        return false;
    }
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */
