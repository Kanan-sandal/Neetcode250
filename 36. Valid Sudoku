class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<unordered_set<char>>rows(9),cols(9),boxes(9);
        for(int r=0;r<9;r++){
            for(int c=0;c<9;c++){
                char val=board[r][c];
                if(val=='.') continue;
                int boxindex=(r/3)*3+(c/3);

                if(rows[r].count(val)) return false;
                rows[r].insert(val);

                if(cols[c].count(val)) return false;
                cols[c].insert(val);

                if(boxes[boxindex].count(val)) return false;
                boxes[boxindex].insert(val);
            }
        }
        return true;
    }
};





class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        bool rows[9][9]={false};
        bool cols[9][9]={false};
        bool boxes[9][9]={false};
        for(int r=0;r<9;r++){
            for(int c=0;c<9;c++){
                char val=board[r][c];
                if(val=='.') continue;

                int num=val-'1';
                int box=(r/3)*3+(c/3);

                if(rows[r][num] || cols[c][num] || boxes[box][num]){
                    return false;
                }
                rows[r][num]=cols[c][num]=boxes[box][num]=true;
            }
        }
        return true;
    }
};
