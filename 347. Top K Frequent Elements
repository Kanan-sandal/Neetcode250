class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        for(int n:nums){
            freq[n]++;
        }
        vector<pair<int,int>> arr(freq.begin(),freq.end());
        sort(arr.begin(),arr.end(),[](auto &a ,auto &b){
            return a.second>b.second;
        });
        vector<int> res;
        for(int i=0;i<k;i++){
            res.push_back(arr[i].first);
        }
        return res;
    }
};




class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        for(int n:nums){
            freq[n]++;
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> minheap;
        for(auto& p:freq){
            minheap.push({p.second,p.first});
            if(minheap.size()>k) minheap.pop();
        }
        vector<int> res;
        while(!minheap.empty()){
            res.push_back(minheap.top().second);
            minheap.pop();
        }
        return res;
    }
};






class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        for(int n:nums){
            freq[n]++;
        }
        int n=nums.size();
        vector<vector<int>> buckets(n+1);
        for(auto& p:freq){
            buckets[p.second].push_back(p.first);
        }
        vector<int> res;
        for(int i=n;i>=0 && res.size()<k;i--){
            for(int num:buckets[i]){
                res.push_back(num);
                if(res.size()==k) break;
            }
        }
        return res;
    }
};
