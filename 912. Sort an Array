vector<int> sortArray(vector<int>& nums) {
    int n = nums.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nums[j] < nums[i])
                swap(nums[i], nums[j]);
        }
    }
    return nums;
}




class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        mergesort(nums,0,nums.size()-1);
        return nums;
    }
private:
    void mergesort(vector<int>&nums,int left,int right){
        if(left>=right) return;
        int mid=left+(right-left)/2;
        mergesort(nums,left,mid);
        mergesort(nums,mid+1,right);
        merge(nums,left,mid,right);
    }
    void merge(vector<int>& nums,int left,int mid,int right){
        vector<int> temp;
        int i=left,j=mid+1;
        while(i<=mid && j<=right){
            if(nums[i]<=nums[j]) temp.push_back(nums[i++]);
            else temp.push_back(nums[j++]);
        }
        while(i<=mid) temp.push_back(nums[i++]);
        while(j<=right) temp.push_back(nums[j++]);

        for(int k=left;k<=right;k++){
            nums[k]=temp[k-left];
        }
    }
};




class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums, 0, nums.size() - 1);
        return nums;
    }

private:
    void quickSort(vector<int>& nums, int low, int high) {
        if (low >= high) return;
        int pivot = nums[high];
        int i = low;
        for (int j = low; j < high; j++) {
            if (nums[j] < pivot)
                swap(nums[i++], nums[j]);
        }
        swap(nums[i], nums[high]);
        quickSort(nums, low, i - 1);
        quickSort(nums, i + 1, high);
    }
};
