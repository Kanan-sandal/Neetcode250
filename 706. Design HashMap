class MyHashMap {
private:
    static const int DEFAULT_SIZE = 769; 
    vector<list<pair<int,int>>> buckets;
    int size;

    int hash(int key) const {
        return key % DEFAULT_SIZE;
    }
public:
    MyHashMap(): buckets(DEFAULT_SIZE), size(0) {}
    
    void put(int key, int value) {
        int idx = hash(key);
        for (auto &p : buckets[idx]) {
            if (p.first == key) {
                p.second = value;
                return;
            }
        }
       
        buckets[idx].push_back({key, value});
        size++;
    }
    
    int get(int key) {
        int idx = hash(key);
        for (auto &p : buckets[idx]) {
            if (p.first == key)
                return p.second;
        }
        return -1;
    }
    
    void remove(int key) {
        int idx = hash(key);
        auto &lst = buckets[idx];
        for (auto it = lst.begin(); it != lst.end(); ++it) {
            if (it->first == key) {
                lst.erase(it);
                size--;
                return;
            }
        }
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
